/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.lxh.myzngt.struts.action;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.lxh.myzngt.dao.IItemDAO;
import org.lxh.myzngt.dao.IQuestionDAO;
import org.lxh.myzngt.vo.Question;

/**
 * MyEclipse Struts Creation date: 07-02-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/show" name="showForm" input="/form/show.jsp"
 *                parameter="status" scope="request" validate="true"
 */
public class ShowAction extends DispatchAction {
	private IQuestionDAO iquestiondao = null;

	private IItemDAO iitemdao = null;

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward selectid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Question q = null;
		try {
			// 更新浏览次数
			this.iquestiondao.updateClickcount(Integer.parseInt(request
					.getParameter("qid")));
			q = this.iquestiondao.queryById(Integer.parseInt(request
					.getParameter("qid")));
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (q != null) {
			request.setAttribute("question", q);
		}

		return mapping.findForward("showquestion");
	}

	// 显示全部一级栏目下的所有问题
	public ActionForward selectitem(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List all = null;
		int currentPage = 1;
		int lineSize = 10;
		int allRecorders = 0;
		try {
			currentPage = Integer.parseInt(request.getParameter("cp"));
		} catch (Exception e) {
		}
		try {
			allRecorders = this.iquestiondao.getByItemCount(Integer
					.parseInt(request.getParameter("itemid")));
			all = this.iquestiondao.queryByItem(Integer.parseInt(request
					.getParameter("itemid")), currentPage, lineSize);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("lineSize", lineSize);
		request.setAttribute("allRecorders", allRecorders);
		request.setAttribute("all", all);
		request.setAttribute("jspUrl", "show.do");
		request.setAttribute("status", "selectitem");
		request.setAttribute("flagname", "itemid");
		request.setAttribute("flagvalue", request.getParameter("itemid"));

		try {
			request.setAttribute("allitem", this.iitemdao.queryAll());
		} catch (Exception e) {
			e.printStackTrace();
		}

		return mapping.findForward("showlist");

	}

	// 显示一个子栏目下的所有问题
	public ActionForward selectsub(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List all = null;
		int currentPage = 1;
		int lineSize = 10;
		int allRecorders = 0;
		try {
			currentPage = Integer.parseInt(request.getParameter("cp"));
		} catch (Exception e) {
		}
		try {
			allRecorders = this.iquestiondao.getBySubCount(Integer
					.parseInt(request.getParameter("subid")));
			all = this.iquestiondao.queryBySub(Integer.parseInt(request
					.getParameter("subid")), currentPage, lineSize);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("lineSize", lineSize);
		request.setAttribute("allRecorders", allRecorders);
		request.setAttribute("all", all);
		request.setAttribute("jspUrl", "show.do");
		request.setAttribute("status", "selectsub");
		request.setAttribute("flagname", "subid");
		request.setAttribute("flagvalue", request.getParameter("subid"));
		try {
			request.setAttribute("allitem", this.iitemdao.queryAll());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("showlist");
	}

	// 模糊查询全部栏目的问题
	public ActionForward selectlike(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List all = null;
		int currentPage = 1;
		int lineSize = 2;
		int allRecorders = 0;
		String keyWord = null;
		keyWord = request.getParameter("kw");
		try {
			keyWord = new String(keyWord.getBytes("ISO8859-1"));
		} catch (UnsupportedEncodingException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		try {
			currentPage = Integer.parseInt(request.getParameter("cp"));
		} catch (Exception e) {
		}
		try {
			allRecorders = this.iquestiondao.getByLikeCount(keyWord);
			all = this.iquestiondao.queryByLike(keyWord, currentPage, lineSize);
		} catch (Exception e) {
			e.printStackTrace();
		}
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("lineSize", lineSize);
		request.setAttribute("allRecorders", allRecorders);
		request.setAttribute("all", all);
		request.setAttribute("jspUrl", "show.do");
		request.setAttribute("status", "selectlike");
		request.setAttribute("keyWord", keyWord);
		try {
			request.setAttribute("allitem", this.iitemdao.queryAll());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("showlist");
	}

	// 列出全部的推荐问题
	public ActionForward selectcommen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List all = null;
		int currentPage = 1;
		int lineSize = 10;
		int allRecorders = 0;
		try {
			currentPage = Integer.parseInt(request.getParameter("cp"));
		} catch (Exception e) {
		}
		try {
			allRecorders = this.iquestiondao.getByCommenCount(Integer
					.parseInt(request.getParameter("commen")));
			all = this.iquestiondao.queryByCommemflag(Integer.parseInt(request
					.getParameter("commen")), currentPage, lineSize);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("lineSize", lineSize);
		request.setAttribute("allRecorders", allRecorders);
		request.setAttribute("all", all);
		request.setAttribute("jspUrl", "show.do");
		request.setAttribute("status", "selectcommen");
		request.setAttribute("flagname", "commen");
		request.setAttribute("flagvalue", request.getParameter("commen"));
		try {
			request.setAttribute("allitem", this.iitemdao.queryAll());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("showlist");
	}

	public ActionForward selectstatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		List all = null;
		int currentPage = 1;
		int lineSize = 2;
		int allRecorders = 0;
		try {
			currentPage = Integer.parseInt(request.getParameter("cp"));
		} catch (Exception e) {
		}
		try {
			allRecorders = this.iquestiondao.getByStatusCount(Integer
					.parseInt(request.getParameter("sta")));
			all = this.iquestiondao.queryByStatus(Integer.parseInt(request
					.getParameter("sta")), currentPage, lineSize);
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		request.setAttribute("currentPage", currentPage);
		request.setAttribute("lineSize", lineSize);
		request.setAttribute("allRecorders", allRecorders);
		request.setAttribute("all", all);
		request.setAttribute("jspUrl", "show.do");
		request.setAttribute("status", "selectstatus");
		request.setAttribute("flagname", "sta");
		request.setAttribute("flagvalue", request.getParameter("sta"));
		try {
			request.setAttribute("allitem", this.iitemdao.queryAll());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("showlist");
	}

	// 列出全部的解决或未解决问题

	public IQuestionDAO getIquestiondao() {
		return iquestiondao;
	}

	public void setIquestiondao(IQuestionDAO iquestiondao) {
		this.iquestiondao = iquestiondao;
	}

	public IItemDAO getIitemdao() {
		return iitemdao;
	}

	public void setIitemdao(IItemDAO iitemdao) {
		this.iitemdao = iitemdao;
	}
}