/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package org.lxh.myzngt.struts.action;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;
import org.apache.struts.action.ActionMessages;
import org.apache.struts.actions.DispatchAction;
import org.lxh.myzngt.dao.IUserDAO;
import org.lxh.myzngt.struts.form.UserForm;
import org.lxh.myzngt.util.MD5Code;
import org.lxh.myzngt.vo.User;

/**
 * MyEclipse Struts Creation date: 06-30-2007
 * 
 * XDoclet definition:
 * 
 * @struts.action path="/user" name="userForm" input="/form/user.jsp"
 *                parameter="status" scope="request" validate="true"
 */
public class UserAction extends DispatchAction {
	private IUserDAO iuserdao;

	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward register(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		// 先判断验证码是否正确
		String ccode = (String) request.getSession().getAttribute("ccode");
		String checkcode = userForm.getCheckcode();
		if (!(checkcode.equals(ccode))) {
			ActionMessages errors = new ActionMessages();
			errors.add("checkcode", new ActionMessage("checkcode.error"));
			super.saveErrors(request, errors);
			return mapping.getInputForward();
		}
		// 如果正确，则需要向数据库中插入
		User user = null;
		try {
			user = this.iuserdao.queryByUserid(userForm.getUserid());
			if (user == null) {
				MD5Code md5 = new MD5Code();
				user = new User();
				user.setUserid(userForm.getUserid());
				user.setUserpwd(md5.getMD5ofStr(userForm.getUserpwd()));
				user.setUserques(userForm.getUserques());
				user.setUserans(userForm.getUserans());
				// System.out.println("** " + userForm.getUserques());
				user.setSex("男");
				user.setGrade(1);
				// 查询此用户是否存在
				this.iuserdao.register(user);
				// 成功之后要将用户名和用户等级保存在session之中
				request.getSession().setAttribute("userid", user.getUserid());
				request.getSession().setAttribute("grade", user.getGrade());
				return mapping.findForward("registersuccess");
			} else {
				ActionMessages errors = new ActionMessages();
				errors.add("exist", new ActionMessage("user.userid.exist"));
				super.saveErrors(request, errors);
				return mapping.getInputForward();
			}
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("registerfailure");
		}
	}

	public ActionForward update(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		// 先判断验证码是否正确
		String ccode = (String) request.getSession().getAttribute("ccode");
		String checkcode = userForm.getCheckcode();
		if (!(checkcode.equals(ccode))) {
			ActionMessages errors = new ActionMessages();
			errors.add("checkcode", new ActionMessage("checkcode.error"));
			super.saveErrors(request, errors);
			return mapping.getInputForward();
		}
		// 如果正确，则需要向数据库中插入
		User user = null;
		try {
			MD5Code md5 = new MD5Code();
			user = new User();
			user.setUserid(userForm.getUserid());
			user.setUserpwd(md5.getMD5ofStr(userForm.getUserpwd()));
			user.setUserques(userForm.getUserques());
			user.setUserans(userForm.getUserans());
			// System.out.println("** " + userForm.getUserques());
			user.setRealname(userForm.getRealname());
			user.setSex(userForm.getSex());
			user.setGrade(Integer.parseInt(userForm.getGrade()));
			user.setIntegral(Integer.parseInt(userForm.getIntegral()));
			user.setUsermail(userForm.getUsermail());
			// 查询此用户是否存在
			this.iuserdao.update(user);
			// 成功之后要将用户名和用户等级保存在session之中
			request.getSession().setAttribute("userid", user.getUserid());
			request.getSession().setAttribute("grade", user.getGrade());
			return mapping.findForward("userinfo");
		} catch (Exception e) {
			request.setAttribute("flag", "error");
			return mapping.findForward("userinfo");
		}
	}

	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		String ccode = (String) request.getSession().getAttribute("ccode");
		String checkcode = userForm.getCheckcode();
		if (!(checkcode.equals(ccode))) {
			ActionMessages errors = new ActionMessages();
			errors.add("checkcode", new ActionMessage("checkcode.error"));
			super.saveErrors(request, errors);
			return mapping.getInputForward();
		}
		User user = new User();
		MD5Code md5 = new MD5Code();
		user.setUserid(userForm.getUserid());
		user.setUserpwd(md5.getMD5ofStr(userForm.getUserpwd()));
		boolean flag = false;
		try {
			flag = this.iuserdao.login(user);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (flag) {
			// 登陆成功
			// 向session之中设置内容
			request.getSession().setAttribute("userid", user.getUserid());
			request.getSession().setAttribute("grade", user.getGrade());
			return mapping.findForward("loginsuccess");
		} else {
			request.setAttribute("flag", "error");
			return mapping.findForward("loginfailure");
		}
	}

	public ActionForward forgetpwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		String ccode = (String) request.getSession().getAttribute("ccode");
		String checkcode = userForm.getCheckcode();
		if (!(checkcode.equals(ccode))) {
			ActionMessages errors = new ActionMessages();
			errors.add("checkcode", new ActionMessage("checkcode.error"));
			super.saveErrors(request, errors);
			return mapping.getInputForward();
		}
		boolean flag = true;
		try {
			flag = this.iuserdao.isExists(userForm.getUserid(), userForm
					.getUserques(), userForm.getUserans());
		} catch (Exception e) {
			e.printStackTrace();
		}
		// 返回到修改密码页
		// 返回到提示问题页
		if (flag) {
			request.setAttribute("flag", "exists");
			return mapping.findForward("exists");
		} else {
			return mapping.findForward("notexists");
		}
	}

	public ActionForward updatepwd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		String ccode = (String) request.getSession().getAttribute("ccode");
		String checkcode = userForm.getCheckcode();
		if (!(checkcode.equals(ccode))) {
			ActionMessages errors = new ActionMessages();
			errors.add("checkcode", new ActionMessage("checkcode.error"));
			super.saveErrors(request, errors);
			return mapping.getInputForward();
		}
		MD5Code md5 = new MD5Code();
		try {
			this.iuserdao.updateUserpwd(userForm.getUserid(), md5
					.getMD5ofStr(userForm.getUserpwd()));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("updatepwddo");
	}

	public ActionForward selectid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 用户已经登陆成功了
		String userid = (String) request.getSession().getAttribute("userid");
		try {
			User user = this.iuserdao.queryByUserid(userid);
			request.setAttribute("user", user);
			//System.out.println("** "+user.getGrade());
			request.setAttribute("grade", org.lxh.myzngt.util.IntegralGrade
					.getInstance().getGradeInfo(user.getGrade()));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("userinfo");
	}

	public ActionForward aa(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		UserForm userForm = (UserForm) form;
		return null;
	}

	public IUserDAO getIuserdao() {
		return iuserdao;
	}

	public void setIuserdao(IUserDAO iuserdao) {
		this.iuserdao = iuserdao;
	}
}